{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","error","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.747fae5f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className='tc bg-washed-red dib br4 pa3 ma2 grow bw2 shadow-5 avenir'>\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba bw1 b--navy br-pill bg-washed-blue avenir b'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='Search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ \n\t\t\toverflowY: 'scroll', \n\t\t\theight: '800px'\n\t\t }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => ({\n\t\tsearchField: state.searchRobots.searchField,\n\t\tisPending: state.requestRobots.isPending,\n\t\trobots: state.requestRobots.robots,\n\t\terror: state.requestRobots.error\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n});\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\t\n\trender() {\n\t\tconst { \n\t\t\tsearchField, \n\t\t\tonSearchChange, \n\t\t\trobots, \n\t\t\tisPending, \n\t\t\terror \n\t\t} = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(\n\t\t\t\tsearchField.toLowerCase()\n\t\t\t)\n\t\t})\n\n\t\tif (isPending)\n\t\t{\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='loadingBar'>Loading</h1>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\telse if (error !== '')\n\t\t{\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1>Error fetching robots</h1>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n        CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCES,\n        REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n        dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ \n                type: REQUEST_ROBOTS_SUCCES, \n                payload: data \n        }))\n        .catch(error => dispatch({ \n                type: REQUEST_ROBOTS_FAILED,\n                payload: error\n         }));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCES = 'REQUEST_ROBOTS_SUCCES';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCES,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCES:\n            return Object.assign(\n                {}, \n                state, \n                { robots: action.payload, isPending: false }\n            );\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign(\n                {}, \n                state, \n                { error: action.payload, isPending: false }\n            );\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(\n\trootReducer, \n\tapplyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}